#include "include/printing.h"

uint8_t g_8x8_font[2048] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E,
	0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00,
	0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x92, 0x10, 0x7C,
	0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C,
	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF,
	0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF,
	0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18,
	0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0,
	0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00,
	0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00,
	0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0x86, 0xFC,
	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00,
	0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00,
	0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00,
	0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00,
	0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00,
	0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
	0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00,
	0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
	0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
	0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,
	0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
	0x7C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x7C, 0x00,
	0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
	0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00,
	0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,
	0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
	0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00,
	0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
	0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
	0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00,
	0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00,
	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,
	0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00,
	0x7C, 0xC6, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00,
	0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,
	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,
	0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00,
	0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00,
	0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,
	0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,
	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
	0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
	0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x0E, 0x00,
	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,
	0x7C, 0xC6, 0xE0, 0x78, 0x0E, 0xC6, 0x7C, 0x00,
	0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
	0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
	0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00,
	0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,
	0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,
	0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
	0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00,
	0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
	0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0x38, 0x6C, 0x64, 0xF0, 0x60, 0x60, 0xF0, 0x00,
	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,
	0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78,
	0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
	0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xD6, 0x00,
	0x00, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
	0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,
	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
	0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0xF0, 0x00,
	0x00, 0x00, 0x7C, 0xC0, 0x70, 0x1C, 0xF8, 0x00,
	0x10, 0x30, 0xFC, 0x30, 0x30, 0x34, 0x18, 0x00,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00,
	0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00,
	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,
	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
	0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00,
	0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
	0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
	0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
	0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x0C, 0x06, 0x7C,
	0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0x7E, 0x81, 0x3C, 0x06, 0x3E, 0x66, 0x3B, 0x00,
	0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0x00, 0x00, 0x7C, 0xC6, 0xC0, 0x78, 0x0C, 0x38,
	0x7E, 0x81, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00,
	0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
	0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x7C, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
	0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0xC6, 0x10, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00,
	0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
	0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00,
	0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
	0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00,
	0x78, 0x84, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x78, 0x84, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
	0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
	0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
	0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
	0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00,
	0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x30, 0xFC, 0x30,
	0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC3,
	0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
	0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
	0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
	0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
	0x00, 0xF8, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0x00,
	0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
	0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00,
	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
	0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3C, 0x00,
	0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00,
	0xC6, 0xCC, 0xD8, 0x36, 0x6B, 0xC2, 0x84, 0x0F,
	0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6D, 0xCF, 0x03,
	0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x18, 0x00,
	0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00,
	0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
	0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
	0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
	0xDB, 0xF6, 0xDB, 0x6F, 0xDB, 0x7E, 0xD7, 0xED,
	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18,
	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
	0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36,
	0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
	0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
	0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
	0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
	0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00,
	0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00,
	0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
	0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
	0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
	0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
	0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36,
	0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
	0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36,
	0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
	0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00,
	0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
	0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00,
	0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
	0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00,
	0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
	0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0,
	0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
	0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC,
	0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
	0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00,
	0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
	0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00,
	0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
	0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00,
	0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
	0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00,
	0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00,
	0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00,
	0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
	0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18,
	0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
	0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00,
	0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
	0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
	0x58, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00,
	0x70, 0x98, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

uint8_t curx = 0, cury = 0;
uint8_t saved_curx = 0, saved_cury = 0;
uint64_t default_color = 0xffaaaaaaff000000;

uint64_t text_width = 80;
uint64_t text_height = 25;

uint64_t fb_width = 1024;
uint64_t fb_height = 768;

//constexpr size_t scroll_buffer_size = (1024/8)*(768/8);

//uint16_t scroll_buffer[scroll_buffer_size];
namespace printing
{
	void init()
	{
		auto screen_size = video::get_screen_size();
		fb_width = screen_size.x;
		fb_height = screen_size.y;

		text_width = fb_width / 8;
		text_height = fb_height / 8;
	}
};

uint32_t color_expand(uint8_t single_color)
{
	switch (single_color)
	{
	case 0:
		return video::rgb(0, 0, 0);
	case 1:
		return video::rgb(0, 0, 0xaa);
	case 2:
		return video::rgb(0, 0xaa, 0);
	case 3:
		return video::rgb(0, 0xaa, 0xaa);
	case 4:
		return video::rgb(0xaa, 0, 0);
	case 5:
		return video::rgb(0xaa, 0, 0xaa);
	case 6:
		return video::rgb(0xaa, 0xaa, 0);
	case 7:
		return video::rgb(0xaa, 0xaa, 0xaa);
	case 8:
		return video::rgb(0x55, 0x55, 0x55);
	case 9:
		return video::rgb(0x55, 0x55, 0xff);
	case 10:
		return video::rgb(0x55, 0xff, 0x55);
	case 11:
		return video::rgb(0x55, 0xff, 0xff);
	case 12:
		return video::rgb(0xff, 0x55, 0x55);
	case 13:
		return video::rgb(0xff, 0x55, 0xff);
	case 14:
		return video::rgb(0xff, 0xff, 0x55);
	case 15:
		return video::rgb(0xff, 0xff, 0xff);
	default:
		return video::rgb(0, 0, 0);
	}
}
uint64_t color_4b_to_32b(uint8_t scolor)
{
	uint32_t bg = (scolor & 0xf0) >> 4;
	uint32_t fg = (scolor & 0x0f);
	return (color_expand(fg)) | ((uint64_t)color_expand(bg) << 32);
}
void draw_char(char c, uint64_t color, uint16_t x, uint16_t y)
{
	for (uint8_t dy = 0; dy < 8; dy++)
	{
		for (uint8_t dx = 0; dx < 8; dx++)
		{
			bool font_bit = g_8x8_font[(uint8_t)c * 8 + dy] & (0b100000000 >> dx);
			video::pixel({(uint64_t)x * 8 + dx, (uint64_t)y * 8 + dy}) = font_bit ? (uint32_t)color : (uint32_t)(color >> 32);
		}
	}
}
void put_char(char c, uint8_t color, uint8_t x, uint8_t y)
{
	draw_char(c, color_4b_to_32b(color), x, y);
	//scroll_buffer[x+y*text_width] = c | uint16_t(color)<<8;
}
void put_char(char c, uint64_t color, uint8_t x, uint8_t y)
{
	draw_char(c, color, x, y);
	//scroll_buffer[x+y*text_width] = c | uint16_t(color)<<8;
}
void clear(uint64_t color)
{
	default_color = color;
	video::clear((uint32_t)(color >> 32));
	//for (uint16_t y = 0; y < text_height; y++)
	//	for (uint16_t x = 0; x < text_width; x++)
	//		put_char(' ', default_color, x, y);
	curx = 0;
	cury = 0;
}
void clear(uint8_t color)
{
	clear(color_4b_to_32b(color));
}
void kscroll()
{
	auto framebuffer_location = &video::pixel({0, 0});
	for (uint64_t i = 0; i < (fb_width * (fb_height - 8)); i++)
	{
		((uint32_t *)framebuffer_location)[i] = ((uint32_t *)framebuffer_location)[i + 8 * fb_width];
	}
	for (uint64_t i = (fb_width * (fb_height - 8)); i < (fb_width * fb_height); i++)
	{
		((uint32_t *)framebuffer_location)[i] = 0;
	}
}

uint64_t get_number(const char *&str)
{
	uint64_t len = 0;
	while (*str >= '0' && *str <= '9')
	{
		len++;
		str++;
	}
	uint64_t ret = 0;
	uint64_t mult = 1;
	for (uint64_t i = 1; i <= len; i++)
	{
		ret += (str[-i] - '0') * mult;
		mult *= 10;
	}
	return ret;
}

void set_default_color_4b(uint8_t color, bool is_foreground)
{
	if (is_foreground)
	{
		default_color = default_color & 0xffffffff00000000 | color_expand(color);
	}
	else
	{
		default_color = default_color & 0xffffffff | (uint64_t(color_expand(color)) << 32);
	}
}

bool set_color(uint64_t num, const char *&str)
{
	if (num >= 30 && num <= 39) //foreground
	{
		switch (num - 30)
		{
		case 0: //black
			set_default_color_4b(0, true);
			break;
		case 1: //red
			set_default_color_4b(4, true);
			break;
		case 2: //green
			set_default_color_4b(2, true);
			break;
		case 3: //yellow
			set_default_color_4b(6, true);
			break;
		case 4: //blue
			set_default_color_4b(1, true);
			break;
		case 5: //magenta
			set_default_color_4b(5, true);
			break;
		case 6: //cyan
			set_default_color_4b(3, true);
			break;
		case 7: //white
			set_default_color_4b(7, true);
			break;
		case 8: //all vga colors
		{
			if (*str != ';')
				return false;
			auto mode_num = get_number(++str);
			if (*str != ';')
				return false;

			if (mode_num == 5)
			{
				auto color_number = get_number(++str);
				switch (color_number)
				{
				case 0:
					set_default_color_4b(0, true);
					break;
				case 1:
					set_default_color_4b(4, true);
					break;
				case 2:
					set_default_color_4b(2, true);
					break;
				case 3:
					set_default_color_4b(6, true);
					break;
				case 4:
					set_default_color_4b(1, true);
					break;
				case 5:
					set_default_color_4b(5, true);
					break;
				case 6:
					set_default_color_4b(3, true);
					break;
				case 7:
					set_default_color_4b(7, true);
					break;
				case 8:
					set_default_color_4b(0 + 8, true);
					break;
				case 9:
					set_default_color_4b(4 + 8, true);
					break;
				case 10:
					set_default_color_4b(2 + 8, true);
					break;
				case 11:
					set_default_color_4b(6 + 8, true);
					break;
				case 12:
					set_default_color_4b(1 + 8, true);
					break;
				case 13:
					set_default_color_4b(5 + 8, true);
					break;
				case 14:
					set_default_color_4b(3 + 8, true);
					break;
				case 15:
					set_default_color_4b(7 + 8, true);
					break;
				default:
					return false;
					break;
				}
			}
			else if (mode_num == 2) //rgb
			{
				auto r = get_number(++str);
				if (*str != ';')
					return false;
				auto g = get_number(++str);
				if (*str != ';')
					return false;
				auto b = get_number(++str);
				default_color = default_color & 0xffffffff00000000 | video::rgb(r, g, b);
			}
			break;
		}
		case 9: //default
			set_default_color_4b(7, true);
			break;
		}
	}
	else if (num >= 40 && num <= 49) //background
	{
		switch (num - 40)
		{
		case 0: //black
			set_default_color_4b(0, false);
			break;
		case 1: //red
			set_default_color_4b(4, false);
			break;
		case 2: //green
			set_default_color_4b(2, false);
			break;
		case 3: //yellow
			set_default_color_4b(6, false);
			break;
		case 4: //blue
			set_default_color_4b(1, false);
			break;
		case 5: //magenta
			set_default_color_4b(5, false);
			break;
		case 6: //cyan
			set_default_color_4b(3, false);
			break;
		case 7: //white
			set_default_color_4b(7, false);
			break;
		case 8: //all vga colors
		{
			if (*str != ';')
				return false;
			auto mode_num = get_number(++str);
			if (*str != ';')
				return false;

			if (mode_num == 5)
			{
				auto color_number = get_number(++str);
				switch (color_number)
				{
				case 0:
					set_default_color_4b(0, false);
					break;
				case 1:
					set_default_color_4b(4, false);
					break;
				case 2:
					set_default_color_4b(2, false);
					break;
				case 3:
					set_default_color_4b(6, false);
					break;
				case 4:
					set_default_color_4b(1, false);
					break;
				case 5:
					set_default_color_4b(5, false);
					break;
				case 6:
					set_default_color_4b(3, false);
					break;
				case 7:
					set_default_color_4b(7, false);
					break;
				case 8:
					set_default_color_4b(0 + 8, false);
					break;
				case 9:
					set_default_color_4b(4 + 8, false);
					break;
				case 10:
					set_default_color_4b(2 + 8, false);
					break;
				case 11:
					set_default_color_4b(6 + 8, false);
					break;
				case 12:
					set_default_color_4b(1 + 8, false);
					break;
				case 13:
					set_default_color_4b(5 + 8, false);
					break;
				case 14:
					set_default_color_4b(3 + 8, false);
					break;
				case 15:
					set_default_color_4b(7 + 8, false);
					break;
				default:
					return false;
					break;
				}
			}
			else if (mode_num == 2) //rgb
			{
				auto r = get_number(++str);
				if (*str != ';')
					return false;
				auto g = get_number(++str);
				if (*str != ';')
					return false;
				auto b = get_number(++str);
				default_color = default_color & 0xffffffff | uint64_t(video::rgb(r, g, b)) << 32;
			}
			break;
		}
		case 9: //default
			set_default_color_4b(0, false);
			break;
		}
	}
	else if (num == 0 && *str == 'm')
	{
		set_default_color_4b(0, false);
		set_default_color_4b(7, true);
	}
	else
	{
		return false;
	}
	if (*str == ';')
		return set_color(get_number(++str), str);
	return *str == 'm';
}

bool parse_ansi(const char *&str)
{									//wip
	if (*str >= '0' && *str <= '9') //it's a number
	{
		auto num = get_number(str);
		switch (*str)
		{
		case 'K': //erase line
			switch (num)
			{
			case 0: //clear from here to end line
				for (uint8_t i = curx; i < text_width; i++)
					put_char(' ', default_color, i, cury);
				break;
			case 1: //clear from line beginning to here
				for (uint8_t i = 0; i <= curx; i++)
					put_char(' ', default_color, i, cury);
				break;
			case 2: //clear from line beginning to end line
				for (uint8_t i = 0; i < text_width; i++)
					put_char(' ', default_color, i, cury);
				break;
			default: //error
				return false;
				break;
			}
			break;
		case 'S': //scroll up n lines
			for (uint8_t i = 0; i < num; i++)
				kscroll();
			break;
		case 'T': //scroll down n lines
			break;
		case 'J': //clear display
			switch (num)
			{
			case 0: //clear from here to end
				for (uint8_t y = cury; y < text_height; y++)
					for (uint8_t x = y == cury ? curx : 0; x < text_width; x++)
						put_char(' ', default_color, x, y);
				break;
			case 1: //clear from beginning to here
				for (uint8_t y = 0; y <= cury; y++)
					for (uint8_t x = 0; x < y == cury ? curx : text_width; x++)
						put_char(' ', default_color, x, y);
				break;
			case 2: //clear from beginning to end
				clear(default_color);
				break;
			default: //error
				return false;
				break;
			}
			break;
		case 'A':
			cury -= min(num, cury);
			break;
		case 'B':
			cury += min(num, text_height - cury - 1);
			break;
		case 'C':
			curx += min(num, text_width - curx - 1);
			break;
		case 'D':
			curx -= min(num, curx);
			break;
		case 'E':
			curx = 0;
			cury += max(num, text_height - cury);
			break;
		case 'F':
			curx = 0;
			cury -= min(num, cury);
			break;
		case 'G':
			curx = num % text_width;
			break;
		case 'm': //change color
		case ';': //2 or more numbers
		{
			auto old_color = default_color;
			auto old_str = str;
			if (!set_color(num, str))
			{ //it is not a color
				str = old_str;
				default_color = old_color;
				uint64_t num2 = get_number(++str);
				switch (*str)
				{
				case 'H': //cursor position
					curx = num % text_width;
					cury = num2 % text_height;
					break;

				default:
					break;
				}
			}
			break;
		}
		default:
			return false;
			break;
		}
	}
	else //it's not a number
	{
		switch (*str)
		{
		case 's'://save
			saved_curx = curx;
			saved_cury = cury;
			break;
		case 'u'://use
			curx = saved_curx;
			cury = saved_cury;
			break;
		case 'H':
			curx = 0;
			cury = 0;
			break;
		default:
			return false;
			break;
		}
	}
	return true;
}

void kprint(const char *string)
{
	while (*string != 0)
	{
		switch (*string)
		{
		case '\n':
			do
			{
				put_char(' ', default_color, curx++, cury);
			} while (curx < text_width);
			curx = 0;
			cury++;
			string++;
			break;
		case '\r':
			curx = 0;
			string++;
			break;
		case '\033':
			switch (*++string)
			{
			case '[':
				//ansi escape sequence
				parse_ansi(++string);
				break;
			// case 'c':
			// 	color = *++string;
			// 	break;
			// case '0':
			// 	color = default_color;
			default:
				break;
			}
			++string;
			break;
		default:
			put_char(*string++, default_color, curx++, cury);
			cury += curx / text_width;
			curx %= text_width;
			break;
		}
		if (cury == text_height)
		{
			cury--;
			kscroll();
		}
	}
}

void println(const char *str)
{
	if (str) //super wrong, check if str is in process memory
		kprint(str);
	kprint("\n");
}

int printf(const char *fmt, ...)
{
	va_list ap;
	constexpr size_t size = 2048;
	char buf[size];
	int l;

	va_start(ap, fmt);
	l = vsnprintf(buf, size, fmt, ap);
	va_end(ap);

	kprint(buf);

	return l;
}
#define DEC_BUFSIZE 65
int vsnprintf(char *str, size_t size, const char *fmt, va_list ap)
{
	size_t in = 0, out = 0, tmp;
	char *aux, buf[DEC_BUFSIZE];
	void *addr;
	int cifre;
	bool islong;
	bool isunsigned;
	size_t cur_size;

	while (out < size - 1 && fmt[in])
	{
		switch (fmt[in])
		{
		case '%':
			islong = false;
			isunsigned = false;
			cifre = -1;
			cur_size = size - 1;
			// numero di cifre
			if (fmt[in + 1] >= '1' && fmt[in + 1] <= '9')
			{
				in++;
				cifre = fmt[in] - '0';
			}
			// limite per %s
			if (fmt[in + 1] == '.' && fmt[in + 2] == '*')
			{
				cur_size = out + va_arg(ap, size_t);
				if (cur_size < out || cur_size > size - 1)
					cur_size = size - 1;
				in += 2;
			}
			// long?

			if (fmt[in + 1] == 'u')
			{
				isunsigned = true;
				if (cifre < 0)
					cifre = 16;
				in++;
			}

			if (fmt[in + 1] == 'l')
			{
				islong = true;
				if (cifre < 0)
					cifre = 16;
				in++;
			}
			switch (fmt[++in])
			{
			case '\0':
				goto end;
			case 'p':
				if (islong)
					goto end;
				addr = va_arg(ap, void *);
				cifre = sizeof(void *) * 2;
				if (out > size - (cifre + 1))
					goto end;
				string_tools::htostr(&str[out], (unsigned long long)addr, cifre);
				out += cifre;
				break;
			case 'd':
				tmp = (islong ? (isunsigned ? va_arg(ap, unsigned long) : va_arg(ap, long)) : (isunsigned ? va_arg(ap, unsigned int) : va_arg(ap, int)));
				if (isunsigned)
					string_tools::utoa(tmp, buf, 10);
				else
					string_tools::itoa(tmp, buf, 10);
				if (string_tools::strlen(buf) > size - out - 1)
					goto end;
				for (aux = buf; *aux; ++aux)
					str[out++] = *aux;
				break;
			case 'x':
				tmp = (islong ? (isunsigned ? va_arg(ap, unsigned long) : va_arg(ap, long)) : (isunsigned ? va_arg(ap, unsigned int) : va_arg(ap, int)));
				if (isunsigned)
					string_tools::utoa(tmp, buf, 16);
				else
					string_tools::itoa(tmp, buf, 16);
				if (string_tools::strlen(buf) > size - out - 1)
					goto end;
				for (aux = buf; *aux; ++aux)
					str[out++] = *aux;
				break;
			case 'b':
				tmp = (islong ? (isunsigned ? va_arg(ap, unsigned long) : va_arg(ap, long)) : (isunsigned ? va_arg(ap, unsigned int) : va_arg(ap, int)));
				if (islong)
					string_tools::utoa(tmp, buf, 2, 64);
				else
					string_tools::utoa(tmp, buf, 2, 32);
				if (string_tools::strlen(buf) > size - out - 1)
					goto end;
				for (aux = buf; *aux; ++aux)
					str[out++] = *aux;
				break;
			case 's':
				if (islong)
					goto end;
				aux = va_arg(ap, char *);
				while (out < cur_size && *aux)
					str[out++] = *aux++;
				break;
			case 'c':
				if (islong)
					goto end;
				tmp = va_arg(ap, int);
				if (out < size - 1)
					str[out++] = tmp;
			}
			++in;
			break;
		default:
			str[out++] = fmt[in++];
		}
	}
end:
	str[out++] = 0;

	return out;
}
int snprintf(char *buf, uint32_t n, const char *fmt, ...)
{
	va_list ap;
	int l;

	va_start(ap, fmt);
	l = vsnprintf(buf, n, fmt, ap);
	va_end(ap);

	return l;
}